################################################################################
# Revel configuration file
# See:
#   http://revel.github.io/manual/appconf.html
#   for more detailed documentation.
################################################################################

# This sets the `AppName` variable which can be used in your code as
#   `if revel.AppName {...}`
app.name = backend

# A secret string which is passed to cryptographically sign the cookie to prevent
# (and detect) user modification.
# Keep this string secret or users will be able to inject arbitrary cookie values
# into your application
app.secret = 2aoXxjcmuz3x2K2In3I0o12iELIGtMxlB2BfGLS7ioDKBqPe4D8YHCz0fUKRbXvk


# The IP address on which to listen.
http.addr =

# The port on which to listen.
http.port = 9000

# Whether to use SSL or not.
http.ssl = false

# Path to an X509 certificate file, if using SSL.
#http.sslcert =

# Path to an X509 certificate key, if using SSL.
#http.sslkey =


# For any cookies set by Revel (Session,Flash,Error) these properties will set
# the fields of:
# http://golang.org/pkg/net/http/#Cookie
#
# The HttpOnly attribute is supported by most modern browsers. On a supported
# browser, an HttpOnly session cookie will be used only when transmitting HTTP
# (or HTTPS) requests, thus restricting access from other, non-HTTP APIs (such
# as JavaScript). This restriction mitigates, but does not eliminate the threat
# of session cookie theft via cross-site scripting (XSS). This feature applies
# only to session-management cookies, and not other browser cookies.
cookie.httponly = false

# Each cookie set by Revel is prefixed with this string.
cookie.prefix = ObrolanSubuh

# A secure cookie has the secure attribute enabled and is only used via HTTPS,
# ensuring that the cookie is always encrypted when transmitting from client to
# server. This makes the cookie less likely to be exposed to cookie theft via
# eavesdropping.
cookie.secure = false

# Limit cookie access to a given domain
#cookie.domain =

# Define when your session cookie expires. Possible values:
# "720h"
#   A time duration (http://golang.org/pkg/time/#ParseDuration) after which
#   the cookie expires and the session is invalid.
# "session"
#   Sets a session cookie which invalidates the session when the user close
#   the browser.
session.expires = 720h


# The date format used by Revel. Possible formats defined by the Go `time`
# package (http://golang.org/pkg/time/#Parse)
format.date     = 02 Jan 2006
format.datetime = 02 Jan 2006 15:04


# Determines whether the template rendering should use chunked encoding.
# Chunked encoding can decrease the time to first byte on the client side by
# sending data before the entire template has been fully rendered.
results.chunked = false


# Prefixes for each log message line
log.trace.prefix = "TRACE "
log.info.prefix  = "INFO  "
log.warn.prefix  = "WARN  "
log.error.prefix = "ERROR "


# The default language of this application.
i18n.default_language = id


# Module to serve static content such as CSS, JavaScript and Media files
# Allows Routes like this:
#  `Static.ServeModule("modulename","public")`
module.static=github.com/revel/modules/static

# This is temporary static file server we use because of Content-Disposition header
# making <link rel="import" href="/something.html"> don't work.
# See: https://github.com/revel/revel/issues/954
#
# TODO: remove this and get back to default static once it's fixed.
module.osstatic=obrolansubuh.com/modules/static



################################################################################
# Section: dev
# This section is evaluated when running Revel in dev mode. Like so:
#   `revel run path/to/myapp`
[dev]
# This sets `DevMode` variable to `true` which can be used in your code as
#   `if revel.DevMode {...}`
#   or in your templates with
#   `<no value>`
mode.dev = true


# Pretty print JSON/XML when calling RenderJson/RenderXml
results.pretty = true


# Automatically watches your applicaton files and recompiles on-demand
watch = true


# If you set watcher.mode = "eager", the server starts to recompile
# your application every time your application's files change.
watcher.mode = "normal"


# Module to run code tests in the browser
# See:
#   http://revel.github.io/manual/testing.html
module.testrunner = github.com/revel/modules/testrunner


# Where to log the various Revel logs
log.trace.output = off
log.info.output  = stderr
log.warn.output  = stderr
log.error.output = stderr

# Development Database
db.import = github.com/go-sql-driver/mysql
db.driver = mysql
db.spec   = obrolansubuh:obrolansubuh@/obrolansubuh.com?charset=utf8&parseTime=true

# Static file location
static.path = http://localhost:9001/

# Server
server.hostname = http://localhost:9000

# Uploads
upload.image.location = /public/upload/

################################################################################
# Section: prod
# This section is evaluated when running Revel in production mode. Like so:
#   `revel run path/to/myapp prod`
# See:
#  [dev] section for documentation of the various settings
[prod]
mode.dev = false


results.pretty = false


watch = false


module.testrunner =


log.trace.output = off
log.info.output  = off
log.warn.output  = %(app.name)s.log
log.error.output = %(app.name)s.log

# Production Database
db.import = github.com/go-sql-driver/mysql
db.driver = mysql
db.spec   = root:@/obrolansubuh?charset=utf8&parseTime=true

# Statif file location
static.path = http://static.obrolansubuh.com/

# Server
server.hostname = http://obrolansubuh.com

# Uploads
upload.image.location = /public/upload/